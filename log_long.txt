----- Graph 1 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
2 -> 3 
2 -> 4 
} 
Going with brute force
Final Leaves: 3
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
2 -> 4 
} 
----- Graph 2 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
2 -> 3 
2 -> 4 
3 -> 5 
4 -> 5 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 3
Final Tree:digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
2 -> 4 
3 -> 5 
} 
----- Graph 3 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 4 
0 -> 5 
} 
Going with brute force
Final Leaves: 5
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 4 
0 -> 5 
} 
----- Graph 4 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 4 
0 -> 5 
1 -> 2 
1 -> 4 
1 -> 5 
2 -> 3 
2 -> 4 
3 -> 4 
4 -> 5 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 5
Final Tree:digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 4 
0 -> 5 
} 
----- Graph 5 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
} 
Going with brute force
Final Leaves: 2
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
} 
----- Graph 6 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
1 -> 3 
2 -> 3 
2 -> 4 
3 -> 5 
4 -> 5 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 4
Final Tree:digraph G { 
edge [dir = none] 
0 -> 2 
1 -> 3 
2 -> 3 
2 -> 4 
3 -> 5 
} 
----- Graph 7 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 6 
0 -> 7 
0 -> 14 
1 -> 2 
1 -> 4 
1 -> 8 
2 -> 3 
2 -> 9 
3 -> 5 
4 -> 6 
4 -> 11 
5 -> 7 
7 -> 16 
8 -> 9 
8 -> 11 
9 -> 10 
9 -> 12 
10 -> 13 
12 -> 15 
14 -> 15 
15 -> 16 
} 
Too big for brute force
Trying greedy
LP did best
Final Leaves: 8
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 6 
0 -> 7 
0 -> 14 
1 -> 2 
1 -> 8 
1 -> 4 
2 -> 3 
2 -> 9 
4 -> 11 
4 -> 6 
5 -> 7 
7 -> 16 
9 -> 10 
9 -> 12 
10 -> 13 
14 -> 15 
} 
----- Graph 8 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 3 
0 -> 4 
1 -> 2 
1 -> 4 
2 -> 4 
2 -> 5 
3 -> 6 
3 -> 7 
4 -> 7 
5 -> 8 
6 -> 9 
7 -> 8 
7 -> 9 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 6
Final Tree:digraph G { 
edge [dir = none] 
0 -> 4 
1 -> 4 
2 -> 4 
2 -> 5 
3 -> 7 
3 -> 6 
4 -> 7 
7 -> 8 
7 -> 9 
} 
----- Graph 9 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 5 
0 -> 7 
1 -> 2 
1 -> 7 
2 -> 3 
2 -> 4 
2 -> 5 
2 -> 7 
3 -> 4 
4 -> 5 
4 -> 6 
5 -> 6 
6 -> 7 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 6
Final Tree:digraph G { 
edge [dir = none] 
0 -> 5 
1 -> 2 
2 -> 5 
2 -> 3 
2 -> 7 
4 -> 5 
5 -> 6 
} 
----- Graph 10 / 13 -----
Omitting input graph viz for size - 99 > 50 edges
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 99
Final Tree:Omitting solution graph viz for size - 99 > 50 edges
----- Graph 11 / 13 -----
Omitting input graph viz for size - 980 > 50 edges
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 48
Final Tree:digraph G { 
edge [dir = none] 
0 -> 26 
1 -> 3 
2 -> 26 
3 -> 26 
3 -> 24 
3 -> 43 
3 -> 47 
4 -> 26 
5 -> 26 
6 -> 26 
7 -> 26 
8 -> 26 
9 -> 26 
10 -> 26 
11 -> 26 
12 -> 26 
13 -> 26 
14 -> 26 
15 -> 26 
16 -> 26 
17 -> 26 
18 -> 26 
19 -> 26 
20 -> 26 
21 -> 26 
22 -> 26 
23 -> 26 
25 -> 26 
26 -> 27 
26 -> 28 
26 -> 29 
26 -> 30 
26 -> 31 
26 -> 32 
26 -> 33 
26 -> 34 
26 -> 35 
26 -> 36 
26 -> 37 
26 -> 38 
26 -> 39 
26 -> 40 
26 -> 41 
26 -> 42 
26 -> 44 
26 -> 45 
26 -> 46 
26 -> 48 
26 -> 49 
} 
----- Graph 12 / 13 -----
Graph is unconnected.
----- Graph 13 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 5 
0 -> 6 
0 -> 7 
0 -> 8 
0 -> 9 
1 -> 2 
1 -> 3 
1 -> 4 
1 -> 5 
1 -> 6 
1 -> 7 
1 -> 8 
1 -> 9 
2 -> 3 
2 -> 4 
2 -> 5 
2 -> 6 
2 -> 7 
2 -> 9 
3 -> 4 
3 -> 5 
3 -> 6 
3 -> 7 
3 -> 8 
4 -> 5 
4 -> 6 
4 -> 7 
4 -> 8 
4 -> 9 
5 -> 6 
5 -> 8 
5 -> 9 
6 -> 7 
6 -> 9 
7 -> 8 
7 -> 9 
8 -> 9 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 9
Final Tree:digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
1 -> 4 
1 -> 5 
1 -> 6 
1 -> 7 
1 -> 8 
1 -> 9 
} 
----- Graph 1 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
2 -> 3 
2 -> 4 
} 
Going with brute force
Final Leaves: 3
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
2 -> 4 
} 
----- Graph 2 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
2 -> 3 
2 -> 4 
3 -> 5 
4 -> 5 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 3
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
2 -> 4 
3 -> 5 
} 
----- Graph 3 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 4 
0 -> 5 
} 
Going with brute force
Final Leaves: 5
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 4 
0 -> 5 
} 
----- Graph 4 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 4 
0 -> 5 
1 -> 2 
1 -> 4 
1 -> 5 
2 -> 3 
2 -> 4 
3 -> 4 
4 -> 5 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 5
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 4 
0 -> 5 
} 
----- Graph 5 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
} 
Going with brute force
Final Leaves: 2
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
} 
----- Graph 6 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
1 -> 3 
2 -> 3 
2 -> 4 
3 -> 5 
4 -> 5 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 4
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 2 
1 -> 3 
2 -> 3 
2 -> 4 
3 -> 5 
} 
----- Graph 7 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 6 
0 -> 7 
0 -> 14 
1 -> 2 
1 -> 4 
1 -> 8 
2 -> 3 
2 -> 9 
3 -> 5 
4 -> 6 
4 -> 11 
5 -> 7 
7 -> 16 
8 -> 9 
8 -> 11 
9 -> 10 
9 -> 12 
10 -> 13 
12 -> 15 
14 -> 15 
15 -> 16 
} 
Too big for brute force
Trying greedy
LP did best
Final Leaves: 8
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 6 
0 -> 7 
0 -> 14 
1 -> 2 
1 -> 8 
1 -> 4 
2 -> 3 
2 -> 9 
4 -> 11 
4 -> 6 
5 -> 7 
7 -> 16 
9 -> 10 
9 -> 12 
10 -> 13 
14 -> 15 
} 
----- Graph 8 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 3 
0 -> 4 
1 -> 2 
1 -> 4 
2 -> 4 
2 -> 5 
3 -> 6 
3 -> 7 
4 -> 7 
5 -> 8 
6 -> 9 
7 -> 8 
7 -> 9 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 6
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 4 
1 -> 4 
2 -> 4 
2 -> 5 
3 -> 7 
3 -> 6 
4 -> 7 
7 -> 8 
7 -> 9 
} 
----- Graph 9 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 5 
0 -> 7 
1 -> 2 
1 -> 7 
2 -> 3 
2 -> 4 
2 -> 5 
2 -> 7 
3 -> 4 
4 -> 5 
4 -> 6 
5 -> 6 
6 -> 7 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 6
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 5 
1 -> 2 
2 -> 5 
2 -> 3 
2 -> 7 
4 -> 5 
5 -> 6 
} 
----- Graph 10 / 13 -----
Omitting input graph viz for size - 99 > 50 edges
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 99
Final Tree:
Omitting solution graph viz for size - 99 > 50 edges
----- Graph 11 / 13 -----
Omitting input graph viz for size - 980 > 50 edges
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 48
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 26 
1 -> 3 
2 -> 26 
3 -> 26 
3 -> 24 
3 -> 43 
3 -> 47 
4 -> 26 
5 -> 26 
6 -> 26 
7 -> 26 
8 -> 26 
9 -> 26 
10 -> 26 
11 -> 26 
12 -> 26 
13 -> 26 
14 -> 26 
15 -> 26 
16 -> 26 
17 -> 26 
18 -> 26 
19 -> 26 
20 -> 26 
21 -> 26 
22 -> 26 
23 -> 26 
25 -> 26 
26 -> 27 
26 -> 28 
26 -> 29 
26 -> 30 
26 -> 31 
26 -> 32 
26 -> 33 
26 -> 34 
26 -> 35 
26 -> 36 
26 -> 37 
26 -> 38 
26 -> 39 
26 -> 40 
26 -> 41 
26 -> 42 
26 -> 44 
26 -> 45 
26 -> 46 
26 -> 48 
26 -> 49 
} 
----- Graph 12 / 13 -----
Graph is unconnected.
----- Graph 13 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 5 
0 -> 6 
0 -> 7 
0 -> 8 
0 -> 9 
1 -> 2 
1 -> 3 
1 -> 4 
1 -> 5 
1 -> 6 
1 -> 7 
1 -> 8 
1 -> 9 
2 -> 3 
2 -> 4 
2 -> 5 
2 -> 6 
2 -> 7 
2 -> 9 
3 -> 4 
3 -> 5 
3 -> 6 
3 -> 7 
3 -> 8 
4 -> 5 
4 -> 6 
4 -> 7 
4 -> 8 
4 -> 9 
5 -> 6 
5 -> 8 
5 -> 9 
6 -> 7 
6 -> 9 
7 -> 8 
7 -> 9 
8 -> 9 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 9
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
1 -> 4 
1 -> 5 
1 -> 6 
1 -> 7 
1 -> 8 
1 -> 9 
} 
----- Graph 1 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
2 -> 3 
2 -> 4 
} 
Going with brute force
Final Leaves: 3
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
2 -> 4 
} 
----- Graph 2 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
2 -> 3 
2 -> 4 
3 -> 5 
4 -> 5 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 3
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
2 -> 4 
3 -> 5 
} 
----- Graph 3 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 4 
0 -> 5 
} 
Going with brute force
Final Leaves: 5
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 4 
0 -> 5 
} 
----- Graph 4 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 4 
0 -> 5 
1 -> 2 
1 -> 4 
1 -> 5 
2 -> 3 
2 -> 4 
3 -> 4 
4 -> 5 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 5
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 4 
0 -> 5 
} 
----- Graph 5 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
} 
Going with brute force
Final Leaves: 2
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
} 
----- Graph 6 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
1 -> 3 
2 -> 3 
2 -> 4 
3 -> 5 
4 -> 5 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 4
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 2 
1 -> 3 
2 -> 3 
2 -> 4 
3 -> 5 
} 
----- Graph 7 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 6 
0 -> 7 
0 -> 14 
1 -> 2 
1 -> 4 
1 -> 8 
2 -> 3 
2 -> 9 
3 -> 5 
4 -> 6 
4 -> 11 
5 -> 7 
7 -> 16 
8 -> 9 
8 -> 11 
9 -> 10 
9 -> 12 
10 -> 13 
12 -> 15 
14 -> 15 
15 -> 16 
} 
Too big for brute force
Trying greedy
LP did best
Final Leaves: 8
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 6 
0 -> 7 
0 -> 14 
1 -> 2 
1 -> 8 
1 -> 4 
2 -> 3 
2 -> 9 
4 -> 11 
4 -> 6 
5 -> 7 
7 -> 16 
9 -> 10 
9 -> 12 
10 -> 13 
14 -> 15 
} 
----- Graph 8 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 3 
0 -> 4 
1 -> 2 
1 -> 4 
2 -> 4 
2 -> 5 
3 -> 6 
3 -> 7 
4 -> 7 
5 -> 8 
6 -> 9 
7 -> 8 
7 -> 9 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 6
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 4 
1 -> 4 
2 -> 4 
2 -> 5 
3 -> 7 
3 -> 6 
4 -> 7 
7 -> 8 
7 -> 9 
} 
----- Graph 9 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 5 
0 -> 7 
1 -> 2 
1 -> 7 
2 -> 3 
2 -> 4 
2 -> 5 
2 -> 7 
3 -> 4 
4 -> 5 
4 -> 6 
5 -> 6 
6 -> 7 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 6
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 5 
1 -> 2 
2 -> 5 
2 -> 3 
2 -> 7 
4 -> 5 
5 -> 6 
} 
----- Graph 10 / 13 -----
Omitting input graph viz for size - 99 > 50 edges
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 99
Final Tree:
Omitting solution graph viz for size - 99 > 50 edges
----- Graph 11 / 13 -----
Omitting input graph viz for size - 980 > 50 edges
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 48
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 26 
1 -> 3 
2 -> 26 
3 -> 26 
3 -> 24 
3 -> 43 
3 -> 47 
4 -> 26 
5 -> 26 
6 -> 26 
7 -> 26 
8 -> 26 
9 -> 26 
10 -> 26 
11 -> 26 
12 -> 26 
13 -> 26 
14 -> 26 
15 -> 26 
16 -> 26 
17 -> 26 
18 -> 26 
19 -> 26 
20 -> 26 
21 -> 26 
22 -> 26 
23 -> 26 
25 -> 26 
26 -> 27 
26 -> 28 
26 -> 29 
26 -> 30 
26 -> 31 
26 -> 32 
26 -> 33 
26 -> 34 
26 -> 35 
26 -> 36 
26 -> 37 
26 -> 38 
26 -> 39 
26 -> 40 
26 -> 41 
26 -> 42 
26 -> 44 
26 -> 45 
26 -> 46 
26 -> 48 
26 -> 49 
} 
----- Graph 12 / 13 -----
Graph is unconnected.
----- Graph 13 / 13 -----
digraph G { 
edge [dir = none] 
0 -> 1 
0 -> 2 
0 -> 3 
0 -> 5 
0 -> 6 
0 -> 7 
0 -> 8 
0 -> 9 
1 -> 2 
1 -> 3 
1 -> 4 
1 -> 5 
1 -> 6 
1 -> 7 
1 -> 8 
1 -> 9 
2 -> 3 
2 -> 4 
2 -> 5 
2 -> 6 
2 -> 7 
2 -> 9 
3 -> 4 
3 -> 5 
3 -> 6 
3 -> 7 
3 -> 8 
4 -> 5 
4 -> 6 
4 -> 7 
4 -> 8 
4 -> 9 
5 -> 6 
5 -> 8 
5 -> 9 
6 -> 7 
6 -> 9 
7 -> 8 
7 -> 9 
8 -> 9 
} 
Too big for brute force
Trying greedy
Greedy did best
Final Leaves: 9
Final Tree:
digraph G { 
edge [dir = none] 
0 -> 1 
1 -> 2 
1 -> 3 
1 -> 4 
1 -> 5 
1 -> 6 
1 -> 7 
1 -> 8 
1 -> 9 
} 
